# -*- coding: utf-8 -*-
"""Password_Strength_Checker

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aCkjU8MQfSVvfnGdGI6xGSjC1lPBRl_s
"""

import re
from getpass import getpass

Common_Passwords = {
    "123456", "abcdefg", "password", "11111","22222", "12345678", "iloveyou", "imthebest", "abc123", "123abc", "12345"
}

def score_password (pw:str) -> (int, dict):
  """Return a score (0-100) and dict describing checks."""
  checks = {}
  length = len(pw)
  checks['length'] = length

  checks['lower'] = bool(re.search(r'[a-z]', pw))
  checks['upper'] = bool(re.search(r'[A-Z]', pw))
  checks['digit'] = bool(re.search(r'\d', pw))
  checks['special'] = bool(re.search(r'[^A-Za-z0-9]', pw))
  checks['common'] = pw.lower() in Common_Passwords
  checks['repeated_chars'] = bool(re.search(r'(.)\1\1', pw))

#scoring: start at 0, add points for length and character variety, subtract for weaknesses
  score = 0
  #length points:
  if length >= 12:
    score += 30
  elif length >8:
    score += 15
  else:
    score += 5

  #variety points:
  variety = checks['lower'] + checks['upper'] + checks['digit'] + checks['special']
  score =+ variety * 15 #up to +60

  #penalties
  if checks['common']:
    score -= 40
  if checks['repeated_chars']:
    score -= 10
  if length < 6:
    score -= 10

  #clamp
  score = max(0, min(100, score))

  return score, checks

def strength_label(score: int) -> str:
  if score >= 75:
    return "Strong"
  elif score >= 45:
    return "Medium"
  else:
    return "Weak"

def suggestions(pw: str, checks: dict) -> list:
  s = []
  if checks['common']:
    s.append("Avoid very common passwords (e.g., '123456' or 'password').")
  if checks['length'] < 12:
    s.append("Use longer passwords (12+ characters recommended).")
  if not checks['upper']:
    s.append("Add uppercase letters.")
  if not checks['lower']:
    s.append("Add lowercase letters.")
  if not checks['digit']:
    s.append("Include digits.")
  if not checks['special']:
    s.append("Include special characters (e.g., !, ?, #).")
  if checks['repeated_chars']:
    s.append("Avoid repeated characters in a row (e.g., aaa).")
  if not s:
    s.append("Well done! Your password meets several recommended standards.")
  return s

def run_checker():
  print("Password Strength Checker")
  pw = getpass("Enter a password to test: ")
  if not pw:
    print("No password entered - exiting.")
    return

  score, checks = score_password(pw)
  label = strength_label(score)
  print("\n---Results---")
  print(f"Score: {score}/100 -> {label}")
  print(f"Length: {checks['length']}")
  print(f"Contains: {'Uppercase, ' if checks['upper'] else ''}{'Lowercase, ' if checks['lower'] else ''}{'Digits, ' if checks['digit'] else ''}{'Special' if checks['special'] else ''}")
  if checks['common']:
    print("⚠️ This password is a commonly used/weak password.")
  if checks['repeated_chars']:
    print("⚠️ This password has repeated characters (e.g., aaa).")

  print("\nSuggestions:")
  for i, s in enumerate(suggestions(pw, checks), 1):
    print(f"{i}. {s}")

if __name__ == "__main__":
  run_checker()